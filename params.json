{"name":"Dredd","tagline":"No more outdated API documentation","body":"# Dreddâ€”API Blueprint Testing Tool\r\n\r\n[![Build Status](https://travis-ci.org/apiaryio/dredd.png?branch=master)](https://travis-ci.org/apiaryio/dredd)\r\n[![Dependency Status](https://david-dm.org/apiaryio/dredd.png)](https://david-dm.org/apiaryio/dredd)\r\n[![devDependency Status](https://david-dm.org/apiaryio/dredd/dev-status.png)](https://david-dm.org/apiaryio/dredd#info=devDependencies)\r\n[![Coverage Status](https://coveralls.io/repos/apiaryio/dredd/badge.png?branch=master)](https://coveralls.io/r/apiaryio/dredd?branch=master)\r\n\r\nDredd is a command-line tool for validating API documentation written in [API Blueprint][] format against its backend implementation built on top of [Gavel][Gavel] HTTP validation library.\r\n\r\n![Dredd API Blueprint testing tool](https://raw.github.com/apiaryio/dredd/master/img/Dredd.png)\r\n\r\n## Installation\r\n[Node.js][] and [NPM][] is required.\r\n\r\n    $ npm install -g dredd\r\n\r\n[Node.js]: https://npmjs.org/\r\n[NPM]: https://npmjs.org/\r\n\r\n## Get Started\r\n```\r\n$ cat > apiary.apib <<EOF\r\n# GET /message\r\n+ Response 200 (text/plain)\r\n      \r\n      Hello World!\r\nEOF\r\n$ dredd blueprint.md http://localhost:3000\r\ninfo: Beginning Dredd testing...\r\npass: GET /message duration: 9ms\r\ncomplete: 1 passing, 0 failing, 0 errors, 0 skipped\r\ncomplete: Tests took 16ms\r\n```\r\n\r\n## Continous Integration\r\n\r\nWith Dredd you can easily plug your API documentation into the Continous Integration system like [Travis CI][] or [Jenkins][] and have API documentation up-to-date, all the time. \r\n\r\n# Validating real-life API Blueprint\r\n\r\nLet's try more complicated example. [Here][dredd-example] you can find complete documentation-driven application in [Express.js][express] for the [GistFox API][gist-doc] used in the [Apiary API Blueprint tutorial][tutorial]. \r\n\r\nWhen you want to validate real-life API blueprint you will face two main catches:\r\n\r\n1. Missing URI parameter example values\r\n2. Non testable resource entity lifecycle\r\n\r\n## 1. Examples for URI Parameters\r\n\r\nFirst of all make sure that all resources specified by an URI template have specified an example value for each URI parameter in the resource's [parameters section][params_blueprint]:\r\n\r\nExapmle:\r\n```\r\n## Gist [/gists/{id}]\r\n\r\n+ Parameters\r\n    + id (required,`42`) ... ID of the Gist in the form of a hash.\r\n```\r\n\r\nResources defined with URI template without specified parameter example value are considered as ambigous. You can check it simply by running `dredd --names apiary.apib http://localhost:3000`\r\n\r\n## 2. Resource lifecycle\r\nNot all bleuprints are written as scenario oriented. It means that order of resources declaration in the blueprint shall not respect entity's lifecycle. For example retreiving a collection of Gists before creating it.\r\n\r\n### Workaround for sorting actions\r\n\r\nIf your API maintain complete entity's lifecycle under one single URI endpoint, you can use `--sort` switch to make Dredd automatically sort actions for the resource starting with `POST` and ending with `DELETE`.\r\n\r\n### Using hook files and fixtures\r\nDredd allows writing **before** and **after** hooks for each defined actions in JavaScript or CoffeeScript. \r\n\r\nIf the entity lifecycle is split into more URI endpoints (e.g. collections and members) the solution is to use Dredd Hooks and database fixtures to setup and teardown testable situation. \r\n\r\nWhen you have a look at the GistFox API [documentation][gist-doc] or [source][gist-source] used in the [example-application][dredd-example] you can see that API actions on a single Gist entity are defined before action for Gist creation (adding to the collection). \r\n\r\nTo setup a testable situation for showing a Gist, you have to create it by adding a fixture to the dabase in the before hook:\r\n\r\n1. Find name of action which you want to wrap with a hook:\r\n  ```\r\n  $ dredd ./apiary.apib http://localhost:3000 --names | grep Retreive\r\n  info: Gist > Gist > Retrieve a Single Gist\r\n  ```\r\n\r\n2. Create a hook file in `hooks/hookfile.coffee`:\r\n  ```\r\n  {before, after} = require 'hooks'\r\n\r\n  db = require(\"mongous\").Mongous\r\n  gists = db('test.gists')\r\n  gist =\r\n    \"id\": \"42\",\r\n    \"created_at\": \"2014-04-14T02:15:15Z\"\r\n    \"description\": \"Description of Gist\"\r\n    \"content\": \"String contents\"\r\n\r\n  before \"Gist > Gist > Retrieve a Single Gist\", (transaction) ->\r\n    gists.insert gist\r\n  ```\r\n\r\n3. Let Dredd know about hooks\r\n  ```\r\n  $ dredd apiary.apib http://localhost:3000/ --hookfiles=hooks/*\r\n  info: Found Hookfiles: hooks/hooks.coffee\r\n  ...\r\n  ```\r\n\r\n\r\n[dredd-example]: https://github.com/apiaryio/dredd-example\r\n[gist-doc]: http://docs.gistfoxapi.apiary.io/?3ColumnDocumentation=1\r\n[gist-source]: https://github.com/apiaryio/dredd-example/blob/master/apiary.apib\r\n[params_blueprint]: https://github.com/apiaryio/api-blueprint/blob/master/API%20Blueprint%20Specification.md#def-uriparameters-section\r\n[API Blueprint]: http://apiblueprint.org/\r\n[test coverage]: https://coveralls.io/r/apiaryio/dredd?branch=master\r\n[Travis CI]: https://travis-ci.org/\r\n[Jenkins]: http://jenkins-ci.org/\r\n[Gavel]: https://github.com/apiaryio/gavel.js\r\n[express]: http://expressjs.com/\r\n[tutorial]: http://apiary.io/blueprint","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}